@using Confluent.Kafka
@using Confluent.Kafka.Admin
@using Kafkaf.Config
@using Kafkaf.Models
@using Microsoft.Extensions.Caching.Memory
@using Microsoft.Extensions.Options

@page "/{clusterIdx:int}/topics/create"
@rendermode InteractiveServer

@inject IOptions<List<ClusterConfigOptions>> ClusterOptions;
@inject IMemoryCache MemoryCache


<PageTitle>Topics: Create New</PageTitle>


<h3>Create Topic</h3>

<div class="container-fluid">
    <div class="row">
        <div class="col-8 mt-4">
            <_CreateTopicForm Model="@TopicModel" @ref="childCreateTopicForm" />
            <_CustomParametersForm CustomParameterList="@TopicModel.CustomParameters" />

            <div class="mt-4">
                <NavLink class="nav-link" href="@UrlBack" style="display: inline;">
                    <button type="button" class="btn btn-primary">Cancel</button>
                </NavLink>
                <button type="button" class="btn btn-light" @onclick="HandleValidSubmitAsync">Create</button>
            </div>
            
        </div>
    </div>
</div>

@if (!string.IsNullOrEmpty(successNotice))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <strong>Success!</strong> @successNotice
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>

    <p>
        <NavLink href="/topics">
            Return to topics
        </NavLink>
    </p>
}

@if(!string.IsNullOrEmpty(errorNotice))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>Error!</strong> @errorNotice
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@code {
    [Parameter]
    public int clusterIdx { get; set; }    

    private CreateTopicModel TopicModel = new();
    private _CreateTopicForm? childCreateTopicForm;        

    private string? successNotice;
    private string? errorNotice;

    private async Task HandleValidSubmitAsync()
    {
        // clear notices
        errorNotice = null;
        successNotice = null;        

        if (childCreateTopicForm?.Validate() != true)
        {            
            return;
        }

        // Process the submitted data
        var newTopic = new TopicSpecification
        {
            Name = TopicModel.Name,
            NumPartitions = TopicModel.NumPartitions,
            ReplicationFactor = TopicModel.ReplicationFactor,
            //Configs = Configs,
            //ReplicasAssignments = ReplicasAssignments
        };

        var clusterConfig = ClusterOptions.Value[clusterIdx - 1];

        try
        {

            await KafkaUtils.CreateTopicAsync(clusterConfig, newTopic);

            successNotice = $"Topic '{newTopic.Name}' created successfully.";
            

            // invalidate cache
            MemoryCache.Remove(clusterConfig.CacheKey());
        }
        catch (CreateTopicsException e)
        {            
            errorNotice = $"An error occurred creating topic '{newTopic.Name}': {e.Results[0].Error.Reason}";
        }
        catch (Exception ex)
        {            
            errorNotice = $"An unexpected error occurred: {ex.Message}";
        }
    }    

    private string UrlBack
    {
        get => $"/{clusterIdx}/topics";
    }        
}
