@using Confluent.Kafka
@using Confluent.Kafka.Admin
@using Kafkaf.Config
@using Kafkaf.Models
@using Kafkaf.Components.UI;
@using Microsoft.Extensions.Caching.Memory
@using Microsoft.Extensions.Options

@page "/{clusterIdx:int}/topics/create"
@rendermode InteractiveServer

@inject IOptions<List<ClusterConfigOptions>> ClusterOptions;
@inject IMemoryCache MemoryCache


<PageTitle>Topics: Create New</PageTitle>


<h3>Create Topic</h3>

<DismissibleAlertError @ref="@alertError" />
<DismissibleAlertSuccess @ref="@alertSuccess"/>

<div class="container-fluid">
    <div class="row">
        <div class="col-8 mt-4">
            <_CreateTopicForm Model="@TopicModel" @ref="childCreateTopicForm" />
            <_CustomParametersForm CustomParameterList="@TopicModel.CustomParameters" />

            @if(loading) 
            {
                <Spinner />
            } 
            
            @if(!loading && !created)
            {
                <div class="mt-4">
                    <NavLink class="nav-link" href="@UrlBack" style="display: inline;">
                        <button type="button" class="btn btn-primary">Cancel</button>
                    </NavLink>
                    <button type="button" class="btn btn-light" @onclick="HandleValidSubmitAsync">Create</button>
                </div>
            }

            @if(created)
            {
                <NavLink class="nav-link" href="@UrlBack" style="">
                    <button type="button" class="btn btn-primary">Back to topics</button>
                </NavLink>
            }
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int clusterIdx { get; set; }    

    private CreateTopicModel TopicModel = new();
    private _CreateTopicForm? childCreateTopicForm;
    private DismissibleAlertError? alertError;
    private DismissibleAlertSuccess? alertSuccess;

    private bool loading = false;
    private bool created = false;

    private async Task HandleValidSubmitAsync()
    {        
        if (childCreateTopicForm?.Validate() != true)
        {            
            return;
        }

        // Process the submitted data
        var newTopic = TopicModel.ToTopicSpecification();        
        var clusterConfig = ClusterOptions.Value[clusterIdx - 1];

        try
        {
            loading = true;

            await KafkaUtils.CreateTopicAsync(clusterConfig, newTopic);

            var successNotice = $"Topic '{newTopic.Name}' created successfully.";
            alertSuccess?.SetNotice(successNotice);

            // set flag
            created = true;

            // invalidate cache
            MemoryCache.Remove(clusterConfig.CacheKey());
        }
        catch (CreateTopicsException e)
        {
            var errorNotice = $"An error occurred creating topic '{newTopic.Name}': {e.Results[0].Error.Reason}";
            alertError?.SetNotice(errorNotice);
        }
        catch (Exception ex)
        {                        
            alertError?.SetNotice($"An unexpected error occurred: {ex.Message}");
            loading = false;
        }
    }    

    private string UrlBack
    {
        get => $"/{clusterIdx}/topics";
    }        
}
