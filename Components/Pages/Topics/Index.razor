@using Confluent.Kafka
@using Confluent.Kafka.Admin
@using Kafkaf.Config
@using Microsoft.Extensions.Caching.Memory
@using Microsoft.Extensions.Options

@page "/{clusterIdx:int}/topics"
@rendermode InteractiveServer

@inject IOptions<List<ClusterConfigOptions>> ClusterOptions;
@inject IMemoryCache MemoryCache

<PageTitle>Topics: List</PageTitle>

<h1>Topics: List</h1>

<div class="card">
  <div class="card-header">
    <ul class="list-group list-group-horizontal">
        <li class="list-group-item col-4">
            <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Recipient's username" aria-label="Recipient's username" aria-describedby="button-addon2">
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="button" id="button-addon2">
                            <i class="bi bi-gear"></i>
                    </button>
                </div>
            </div>
        </li>
        <li class="list-group-item col-2">
            checkboxx
        </li>
    </ul>
  </div>
  <div class="card-body">
    <table class="table">
        <thead>
            <tr>
                    <th>Topic Name</th>
                    <th>Partitions</th>
                    <th>Out of sync replicas</th>
                    <th>Replication Factor</th>
                    <th>Number of messages</th>
                    <th>Size</th>
            </tr>
        </thead>            
        <tbody>
                @foreach (var topic in Topics)
                {
                    <tr>
                        <td>@topic.TopicName</td>
                        <td>@topic.Partitions</td>
                        <td>@topic.OutOfSyncReplicas</td>
                        <td>@topic.ReplicationFactor</td>
                        <td>@topic.NumberOfMessages TODO</td>
                        <td>@topic.Size TODO</td>
                    </tr>
                }
        </tbody>
    </table>

    
    
  </div>
  <div class="card-footer">      
        cluster no: #@clusterIdx
  </div>
</div>


@code {
    public struct TopicsListRow
    {
        public string TopicName { get; set; }
        public int Partitions { get; set; }
        public int OutOfSyncReplicas { get; set; }
        public string ReplicationFactor { get; set; }
        public int NumberOfMessages { get; set; }
        public int Size { get; set; }

        public TopicsListRow(TopicMetadata meta)
        {
            TopicName = meta.Topic;
            Partitions = meta.Partitions.Count;

            if (meta.Partitions.Count > 0)
            {
                ReplicationFactor = meta.Partitions[0].Replicas.Length.ToString();
                OutOfSyncReplicas = meta.Partitions
                    .Sum(partition => partition.Replicas[0] - partition.InSyncReplicas[0]);
            }
            else
            {
                ReplicationFactor = "0";
                OutOfSyncReplicas = 0;
            }

            NumberOfMessages = 0; // TODO
            Size = 0; //TODO
        }
    }

    [Parameter]
    public int clusterIdx { get; set; }

    public List<TopicsListRow> Topics = new();

    protected override async Task OnInitializedAsync()
    {        
        var clusterConfig = ClusterOptions.Value[clusterIdx - 1];
        var meta = await MemoryCache.GetOrCreateAsync(
            clusterConfig.CacheKey(),
            async cacheEntry =>
            {
                cacheEntry.SlidingExpiration = TimeSpan.FromMinutes(60);

                return await KafkaUtils.GetMetadata(clusterConfig);
            });

        // TODO: handle null
        Topics = meta!.Topics
            .Select(meta => new TopicsListRow(meta))
            .ToList();
        
        await base.OnInitializedAsync();
    }      
}
