@using Kafkaf.Models

<h4>Custom parameters</h4>

<EditForm FormName="CustomParameters" Model="CustomParameter" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />	

	<table>
		<thead>
			<tr>
				<th>Key</th>
				<th>Value</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var pair in CustomParameterList)
			{
				<tr>
					<td>@pair.Key</td>
					<td>@pair.Value</td>
					<td>
						<button type="button" class="btn btn-danger" @onclick="() => HandleDelete(pair.Key!)">Remove</button>
					</td>
				</tr>
			}
			<tr>
				<td>
					<InputSelect @bind-Value="CustomParameter.Key" class="form-control">
						<option value="">--Select--</option>
						@foreach (var property in AvailableKeys())
						{
							<option value="@property">@property</option>
						}
					</InputSelect>
				</td>
				<td>
					<InputText @bind-Value="CustomParameter.Value" class="form-control"></InputText>
				</td>
				<td>
					<button type="submit" class="btn btn-primary">Append</button>
					<button type="button" class="btn btn-secondary" @onclick="() => CustomParameter.Reset()">Clear</button>
				</td>
			</tr>
		</tbody>
	</table>
	<ValidationSummary />

</EditForm>

@code {
	private TopicCustomParameterModel CustomParameter = new();

	[Parameter]
	public required List<TopicCustomParameterModel> CustomParameterList { get; set; }

	private void HandleValidSubmit()
	{
		CustomParameterList.Add((TopicCustomParameterModel)CustomParameter.Clone());
		CustomParameter.Reset();
	}

	private void HandleDelete(string key)
	{
		if (CustomParameterList.FirstOrDefault(p => p.Key == key) is TopicCustomParameterModel customParameter)
		{
			CustomParameterList.Remove(customParameter);
		}		
	}

	private string[] AvailableKeys()
	{
		var allKeys = KafkaTopicProperties.GetKeys();

		if (CustomParameterList.Count > 0)
		{
			var usedKeyes = CustomParameterList
				.Select(cp => cp.Key)
				.Where(key => key is not null)				
				.Cast<string>()
				.ToArray();

			return allKeys.Except(usedKeyes)
				.ToArray();
		}

		return allKeys;
	}
}
