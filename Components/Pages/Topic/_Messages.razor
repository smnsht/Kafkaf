@using Kafkaf.Config
@using Kafkaf.ViewModels
@using Microsoft.Extensions.Caching.Memory
@using Microsoft.Extensions.Options

@* @inject IOptions<List<ClusterConfigOptions>> ClusterOptions;
@inject IMemoryCache MemoryCache *@

@inherits ClusterIndexAwarePage

<div class="container-fluid">
	<div class="row">
		<div class="col px-1">
			<label>Seek Type</label>
			<KafkafEnumSelect EnumType="@typeof(SeekType)"
							  Value="@seekType"
							  ValueChanged="HandleSeekTypeChanged" />
		</div>
		<div class="col px-1">
			<label>&nbsp;</label>
			<input type="text"
				   placeholder="@seekType"
				   class="form-control" />
		</div>
		<div class="col px-1">
			<label>Partitions</label>
			<select class="form-control">
				<option>a</option>
				<option>b</option>
			</select>
		</div>
		<div class="col px-1">
			<label>Key Serde</label>
			<KafkafEnumSelect EnumType="@typeof(SerdeKind)"
							  Value="@keySerde"
							  ValueChanged="HandleKeySerdeChanged" />
		</div>
		<div class="col px-1">
			<label>Value Serde</label>
			<KafkafEnumSelect EnumType="@typeof(SerdeKind)"
							  Value="@valueSerde"
							  ValueChanged="HandleValueSerdeChanged" />
		</div>
		<div class="col px-1">
			<label>Sort</label>
			<KafkafEnumSelect EnumType="@typeof(SortKind)"
							  Value="@sortKind"
							  ValueChanged="HandleSortKindChanged" />
		</div>
		<div class="col px-1">
			<label>&nbsp;</label>
			<div>
				<div class="btn-group" role="group">
					<button class="btn btn-light" @onclick="HandleClear">&times;</button>
					<button class="btn btn-primary" @onclick="HandleSearchAsync">Submit</button>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="container-fluid mt-2">
	<div class="row">
		<div class="col-3 px-1">
			<input type="text"
				   @bind="@searchText"
				   class="form-control"
				   placeholder="search" />
		</div>
		<div class="col-3">
			<button type="button" class="btn btn-secondary" disabled>+ Add Filters</button>
		</div>
	</div>
</div>

@if (rows != null)
{
	<table class="table mt-5">
		<thead>
			<tr>
				<th>Offset</th>
				<th>Partition</th>
				<th>Timestamp</th>
				<th>Key</th>
				<th>Value</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var msg in rows)
			{
				<tr>
					<td>@msg.Offset</td>
					<td>@msg.Partition</td>
					<td>@msg.Timestamp</td>
					<td>@msg.Key</td>
					<td>@msg.Value</td>
				</tr>
			}
		</tbody>
	</table>
}

topicc: @TopicName
clusterIdx: @clusterIdx

@code {
	[CascadingParameter(Name = "TopicName")]
	public required string TopicName { get; set; }

	private SeekType seekType = SeekType.Offset;
	private SerdeKind keySerde = SerdeKind.String;
	private SerdeKind valueSerde = SerdeKind.String;
	private SortKind sortKind = SortKind.Asc;
	private string? searchText;

	private MessageViewModel<string, string>[]? rows;

	private void HandleSeekTypeChanged(Object e) => seekType = (SeekType)e;
	private void HandleKeySerdeChanged(Object e) => keySerde = (SerdeKind)e;
	private void HandleValueSerdeChanged(Object e) => valueSerde = (SerdeKind)e;
	private void HandleSortKindChanged(Object e) => sortKind = (SortKind)e;

	private void HandleClear()
	{
		seekType = SeekType.Offset;
		keySerde = SerdeKind.String;
		valueSerde = SerdeKind.String;
		sortKind = SortKind.Asc;
		searchText = null;
		rows = null;
	}

	private Task HandleSearchAsync()
	{
		rows = SearchMessages().ToArray();
		return Task.CompletedTask;
	}

	public  IEnumerable<MessageViewModel<string, string>> SearchMessages()
	{
		// TODO: refactory copy-paste
		// var clusterConfig = ClusterOptions.Value[0];TODO: obtain proper index
		// var meta = await MemoryCache.GetOrCreateAsync(
		// 	clusterConfig.CacheKey(),
		// 	async cacheEntry =>
		// 	{
		// 		cacheEntry.SlidingExpiration = TimeSpan.FromMinutes(60);

		// 		return await KafkaUtils.GetMetadata(clusterConfig);
		// 	});

		// var fooo = Task.Run(() =>
		// {
		// 	KafkaUtils.ReadMessages(clusterConfig, meta,)	
		// });
		yield return new MessageViewModel<string, string>()
		{
			Key = "1",
			Value = "asdfasdf",
			Offset = 1,
			Partition = 0,
			Timestamp = DateTime.Now
		};

		yield return new MessageViewModel<string, string>()
		{
			Key = "2",
			Value = "asdfasdf afasdfasdfasd f",
			Offset = 2,
			Partition = 0,
			Timestamp = DateTime.Now
		};
	}
}
