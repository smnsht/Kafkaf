@using Kafkaf.UI.Config
@using Microsoft.Extensions.Options

@inject IOptions<List<ClusterConfigOptions>> ClusterOptions;
@inject NavigationManager Navigation

<div class="accordion" id="accordionDashboard">
	@for (var i = 0; i < Clusters.Count; i++)
	{
		var cluster = @Clusters[i];
		var headerId = $"heading{i + 1}";
		var collapseId = $"collapse{i + 1}";
		var isCurrent = (clusterId.HasValue && (clusterId.Value - 1) == i);

		<div class="accordion-item">
			<h4 class="accordion-header" id="@headerId">
				<button class="accordion-button collapsed"
						title="@cluster.Address"
						type="button"
						data-bs-toggle="collapse"
						data-bs-target="@($"#{collapseId}")"
						aria-expanded="false"
						aria-controls="@collapseId">
					@cluster.Alias

					@if (isCurrent)
					{						
						<span class="badge bg-success rounded-circle ms-2">&nbsp;</span>
					}
				</button>
			</h4>

			<div id="@collapseId"
				 class="accordion-collapse collapse"
				 aria-labelledby="@headerId"
				 data-bs-parent="#accordionDashboard">

				<div class="accordion-body">
					<p class="fs-6 text-truncate">
						<i>@cluster.Address</i>
					</p>

					<div class="nav-item px-3 mt-2 mb-2">
						<NavLink class="nav-link" href="@($"/{i+1}/brokers")">
							<span class="" aria-hidden="true"></span> Brokers
						</NavLink>
					</div>
					<div class="nav-item px-3 mt-2 mb-2">
						<NavLink class="nav-link" href="@($"/{i + 1}/topics")">
							<span class="" aria-hidden="true"></span> Topics
						</NavLink>
					</div>
					<div class="nav-item px-3 mt-2 mb-2">
						<NavLink class="nav-link" href="@($"/{i + 1}/consumer-groups")">
							<span class="" aria-hidden="true"></span> Consumers
						</NavLink>
					</div>

					<button type="button" class="btn btn-secondary" disabled title="TODO">Clear Cache</button>
				</div>
			</div>
		</div>
	}
</div>

@code {
	private List<ClusterConfigOptions> Clusters = new List<ClusterConfigOptions>();
	private int? clusterId { get; set; }

	protected override void OnInitialized()
	{
		Clusters = ClusterOptions.Value;

		var uri = new Uri(Navigation.Uri);
		var firstSegment = uri.LocalPath
			.Split('/')
			.Where(s => !string.IsNullOrEmpty(s))
			.FirstOrDefault();

		if (int.TryParse(firstSegment, out int i))
		{
			clusterId = i;
		}

		base.OnInitialized();
	}
}
