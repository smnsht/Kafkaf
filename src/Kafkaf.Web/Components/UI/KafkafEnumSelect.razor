@if (EnumType != null)
{
    <select class="form-control" @onchange="OnValueChanged">
        @foreach (var value in Enum.GetValues(EnumType))
        {
            <option value="@value" selected="@value.Equals(Value)">
                @GetDisplayName(value)
            </option>
        }
    </select>
}

@code {
    [Parameter]
    public required Type EnumType { get; set; }

    [Parameter]
    public required object Value { get; set; }

    [Parameter]
    public EventCallback<object> ValueChanged { get; set; }

    private async Task OnValueChanged(ChangeEventArgs e)
    {
        if (e.Value is string stringValue 
            && Enum.TryParse(EnumType, stringValue, out var parsed) 
            && Enum.IsDefined(EnumType, parsed))
        {
            Value = parsed;
            await ValueChanged.InvokeAsync(Value);
        }        
    }

    // TODO: cache and get rid of warnings
    private string GetDisplayName(object enumValue)
    {
        var field = EnumType.GetField(enumValue.ToString());
        var attr = field?.GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.DisplayAttribute), false)
                        .Cast<System.ComponentModel.DataAnnotations.DisplayAttribute>()
                        .FirstOrDefault();
        return attr?.Name ?? enumValue.ToString();
    }
}
